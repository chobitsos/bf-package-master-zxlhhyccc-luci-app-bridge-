#!/bin/sh

set -x

. "$IPKG_INSTROOT"/lib/functions.sh
#. /etc/init.d/zerotier

# Detect firewall framework
FW_CMD="fw3"
FW_RELOAD="reload"
NFT_INCDIR=""
if command -v fw4 >/dev/null; then
    FW_CMD="fw4"
    FW_RELOAD="restart"  # fw4 prefers restart for rule changes
    NFT_INCDIR="/usr/share/nftables.d/chain-pre"
fi

# Create ZeroTier configuration directory
create_dir() {
    CONFIG_PATH="/var/lib/zerotier-one"
    [ -d "$CONFIG_PATH" ] || mkdir -p "$CONFIG_PATH"
}

# Clean firewall rule
clean_firewall_rules() {
    logger -t "zerotier" "Cleaning firewall rules..."
    
    if [ "$FW_CMD" = "fw4" ]; then
        rm -f "$NFT_INCDIR"/{input,forward,srcnat}/zerotier.nft
    else
        local interface_file="/var/run/zerotier.interfaces"
        
        if [ -f "$interface_file" ]; then
            while IFS= read -r idx || [ -n "$idx" ]; do
                [ -n "$idx" ] || continue
                
                # Remove zone
                uci -q delete firewall.$idx

                uci -q batch <<-EOF >/dev/null
                    delete dhcp.$idx
                    commit dhcp
                    delete network.$idx
                    commit network
EOF
                # Reload configuration
                /etc/init.d/network reload
                /etc/init.d/dnsmasq reload

                # Remove forwardings
                for idx in $(uci show firewall | grep '=forwarding' | cut -d'[' -f2 | cut -d']' -f1 | sort -nr); do
                    src=$(uci -q get firewall.@forwarding[$idx].src)
                    dest=$(uci -q get firewall.@forwarding[$idx].dest)
                    if [ "$src" = "$name" ] || [ "$dest" = "$name" ]; then
                        uci -q delete firewall.@forwarding[$idx]
                    fi
                done
            done < "$interface_file"
            rm -f "$interface_file"
        fi
        
        # Remove port rules
        for idx in $(uci show firewall | grep '=rule' | grep 'zerotier_port_' | cut -d. -f2 | cut -d= -f1); do
            uci -q delete firewall.$idx
        done
    fi

    uci commit firewall
    "$FW_CMD" "$FW_RELOAD"
}

apply_firewall_rules() {
    if ! /etc/init.d/zerotier running; then
        logger -t "zerotier" "Service not running, skipping rule application"
        return 1
    fi

    local primaryPort secondaryPort ports
    primaryPort=$(zerotier-cli -j info 2>/dev/null | jsonfilter -q -e '@.config.settings.primaryPort')
    secondaryPort=$(zerotier-cli -j info 2>/dev/null | jsonfilter -q -e '@.config.settings.secondaryPort')

    ports=""
    [ -n "$primaryPort" ] && ports="$primaryPort"
    [ -n "$secondaryPort" ] && ports="$ports $secondaryPort"
	
    [ -z "$ports" ] && {
        logger -t "zerotier" "No valid ports found, skipping rule application"
        return 1
    }

    clean_firewall_rules

    if [ "$FW_CMD" = "fw4" ]; then
        mkdir -p "$NFT_INCDIR"/{input,forward,srcnat}
        for port in $ports; do
            [ -n "$port" ] && {
                echo "udp dport $port counter accept comment \"!fw4: Allow-ZeroTier-Inbound\"" \
                    >> "$NFT_INCDIR/input/zerotier.nft"
                logger -t "zerotier" "Added port $port rule (fw4)"
            }
        done
    else
        local idx=0
        for port in $ports; do
            [ -n "$port" ] && {
                uci -q batch <<-EOF
                    set firewall.zerotier_port_$idx=rule
                    set firewall.zerotier_port_$idx.name="Allow-ZeroTier-Inbound-$idx"
                    set firewall.zerotier_port_$idx.src="*"
                    set firewall.zerotier_port_$idx.proto="udp"
                    set firewall.zerotier_port_$idx.dest_port="$port"
                    set firewall.zerotier_port_$idx.target="ACCEPT"
EOF
                logger -t "zerotier" "Added port $port rule (fw3)"
                idx=$((idx + 1))
            }
        done
    fi

    # Process ZeroTier networks
    zerotier_nat() {
        local cfg="$1"
        local enabled id auto_nat portDeviceName

        config_get_bool enabled "$cfg" 'enabled' 0
        [ "$enabled" -eq 1 ] || return

        config_get id "$cfg" 'id'
        config_get_bool auto_nat "$cfg" 'auto_nat' 0
        [ "$auto_nat" -eq 1 ] || return

        portDeviceName=$(zerotier-cli -j listnetworks 2>/dev/null | 
            jsonfilter -q -e "@[@.nwid=\"$id\"].portDeviceName")
        [ -n "$portDeviceName" ] || return

        # Record interfaces
        echo "$portDeviceName" >> /var/run/zerotier.interfaces

        # Configure network and DHCP
        uci -q batch <<-EOF
            set network.$portDeviceName=interface
            set network.$portDeviceName.ifname="$portDeviceName"
            set network.$portDeviceName.proto="none"
            set network.$portDeviceName.device="$portDeviceName"
            commit network
            
            set dhcp.$portDeviceName=dhcp
            set dhcp.$portDeviceName.interface="$portDeviceName"
            set dhcp.$portDeviceName.ignore="1"
            commit dhcp
EOF

        # Get IP segments
        local ip_segments
        ip_segments=$(ip -o route show dev "$portDeviceName" | 
            awk '/proto kernel/ {print $1}')

        if [ "$FW_CMD" = "fw4" ]; then
            # nftables rules
            cat <<-EOF >> "$NFT_INCDIR/input/zerotier.nft"
                iifname "$portDeviceName" counter accept \\
                    comment "!fw4: Zerotier allow inbound from $portDeviceName"
EOF
            cat <<-EOF >> "$NFT_INCDIR/forward/zerotier.nft"
                iifname "$portDeviceName" counter accept \\
                    comment "!fw4: Zerotier forward in $portDeviceName"
                oifname "$portDeviceName" counter accept \\
                    comment "!fw4: Zerotier forward out $portDeviceName"
EOF
            cat <<-EOF >> "$NFT_INCDIR/srcnat/zerotier.nft"
                oifname "$portDeviceName" counter masquerade \\
                    comment "!fw4: Zerotier SNAT outbound $portDeviceName"
EOF
            for seg in $ip_segments; do
                echo "ip saddr $seg counter masquerade \\
                    comment \"!fw4: Zerotier $seg SNAT\"" \
                    >> "$NFT_INCDIR/srcnat/zerotier.nft"
            done
        else
            # iptables rules via uci
            uci -q batch <<-EOF
                set firewall.$portDeviceName=zone
                set firewall.$portDeviceName.name="$portDeviceName"
                set firewall.$portDeviceName.input="ACCEPT"
                set firewall.$portDeviceName.output="ACCEPT"
                set firewall.$portDeviceName.forward="ACCEPT"
                set firewall.$portDeviceName.masq="1"
                set firewall.$portDeviceName.mtu_fix="0"
                add_list firewall.$portDeviceName.device="$portDeviceName"
                add_list firewall.$portDeviceName.network="$portDeviceName"
EOF
            for seg in $ip_segments; do
                uci -q add_list firewall.$portDeviceName.subnet="$seg"
            done

            # Add forwardings
            for dest in lan wan; do
                uci -q batch <<-EOF
                    add firewall forwarding
                    set firewall.@forwarding[-1].src="$portDeviceName"
                    set firewall.@forwarding[-1].dest="$dest"
EOF
            done
            uci -q batch <<-EOF
                add firewall forwarding
                set firewall.@forwarding[-1].src="lan"
                set firewall.@forwarding[-1].dest="$portDeviceName"
EOF
        fi

        logger -t "zerotier" "Auto NAT for $id ($portDeviceName) configured"
    }

    config_load zerotier
    config_foreach zerotier_nat 'network'

    if [ "$FW_CMD" = "fw4" ]; then
        uci -q set firewall.@defaults[0].auto_includes="1"
    fi
    uci commit firewall
    "$FW_CMD" "$FW_RELOAD"
}

case "$1" in
    start)  
        apply_firewall_rules
        ;;
    stop)
        create_dir
        clean_firewall_rules
        ;;
    *)
        echo "Usage: $0 {start|stop} [interface]";
        exit 1
        ;;
esac

exit 0
